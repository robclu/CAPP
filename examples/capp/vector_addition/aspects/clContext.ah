/*
 * Abstract aspect that defines how a parallel aspect will be implemented.
 * This allows for more specific aspects to be derived from it that do not 
 * have to deal with the setup of the parallel context but rather just define
 * where to setup the parallel context.
 *
 * All member funciton implementations for the class clInstance are in
 * clInstance.cc
 *
 */

#ifndef __CL_CONTEXT__ASPECT__
#define __CL_CONTEXT__ASPECT__

#include <vector>
#include <time.h>
#include <iostream>

// Windows 
#if defined(__WIN64) || defined(__WIN32)
	#include <windows.h>
#endif

// Make sure we are using version 1.1
// otherwise NVIDIA GPU's wont work
#ifdef __APPLE__
	#include <OpenCL/opencl.hpp>
#else
	#include <CL/cl.hpp>
	#undef   CL_VERSION_1_2
#endif

#define This	tjp->that()		// Pointer to context on which advice acts
#define T		float			// Type of data the kernel will operate on

using namespace std;

aspect clContext {
public:
	// Class that holds any necessary OpenCL variables and 
	// calls any necessary OpenCL functions 
    class clInstance {
		public: 
			timespec start;					// Time point for start
			timespec end;					// Time point for end
		public:
            // OpenCL context
            cl::Context context;

            // OpenCL available platforms
            vector<cl::Platform> platforms;

            // Devices available for the chosen platform 
            vector<cl::Device> devices;

            // OpenCl command queue 
            cl::CommandQueue queue;

            // OpenCL kernel that will be executed on the device
            cl::Kernel kernel;

            // OpenCL program 
            cl::Program program;

            // OpenCL buffers that are used to move data between the host
            // memory and the device memory when the kernel is executed
            vector<cl::Buffer> buffers;

            // All instances must have a run kernel function
            virtual void runKernel(vector< vector<T> >& inputs,
                                   vector< vector<T> >& outputs) = 0;

            timespec GetRunTime();

		private:
            // Sets up the necessary OpenCL variables using the device type
            // and the kernel source file
            void setupOpenCL(const string& devType, const string& kSource);

            // Sets up the OpenCL kernel
            void setupKernel(const string& kSource, const string& kName);

            // Manages data buffers on kernel execution
            void manageClBuffers(vector< vector<T> >* inputs,
                                 vector< vector<T> >* outputs);
	};

    // Virtual pointcuts which must be set to the cpp classes that will need
    // the pointcuts advice (which is defined below)
    pointcut virtual programs() = 0;

    // Pointcuts that run on contruction and setup OpenCL
    // Sets up both the OpenCL variables and the kernel
    pointcut clSetup() = construction(programs());		

    // Pointcut to manage opencl variables (mostly mem) when the kernel is
    // executed
    pointcut manageRunKernel() = execution("% ...::...::runKernel(...)") && 
                                 within(programs()); 

    // Insert the class clContext - all its variables and functions into the
    // classes defined bu programs
    advice programs() : baseclass(clInstance);

    // setupOpenCL(...) will be inserted into the classes defined by
    // programs() which are essentially calling their own setupOpenCL() fn's
    advice clSetup() : around() 
    {   
        This->setupOpenCL(This->deviceType, This->kernelSource);
        This->setupKernel(This->kernelSource, This->kernelName);
        tjp->proceed();
    }

    // Advice that will make the running of a kernel simple 
    advice manageRunKernel() : before() 
    {
        // Pass as arguments pointers to the runKernel() fn's arguments
        // i.e the inputs and outputs vectors which are modified, not
        // copied, so that the results are stored in the given outputs
        // vector
        This->manageClBuffers(tjp->arg<0>(), tjp->arg<1>());
    }
};

#endif	
			